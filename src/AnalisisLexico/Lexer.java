/* The following code was generated by JFlex 1.4.1 on 08/11/23, 17:52 */


package AnalisisLexico;
import static AnalisisLexico.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 08/11/23, 17:52 from the specification file
 * <tt>C:/Users/cesar/OneDrive/Documentos/NetBeansProjects/GCKCompiler/src/AnalisisLexico/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 42,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 46,  0,  0,  0, 45, 49,  0, 48, 48, 45, 44,  0, 44, 51, 41, 
     2,  2, 23,  2,  2,  2,  2,  2,  2,  2,  0,  0, 47, 43, 47,  0, 
     0, 18, 31, 20, 24, 39, 28,  1,  1,  1,  1,  1,  1,  1,  1, 35, 
    37,  1, 21, 15, 32,  1, 27,  1,  1,  1,  1, 48,  0, 48,  0,  0, 
     0, 10, 17, 11, 26, 22,  7, 16, 13,  4, 36, 40,  8, 33,  5,  9, 
    34,  1, 14, 12,  6, 29, 38, 30, 25, 19,  1, 48, 50, 48,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\25\2\1\5\1\6"+
    "\1\7\2\5\1\10\1\11\1\12\2\1\1\13\1\0"+
    "\1\2\1\14\33\2\1\4\1\7\1\11\1\10\1\15"+
    "\76\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\64\0\u057c\0\u05b0\0\u05e4\0\u057c"+
    "\0\u057c\0\64\0\u0618\0\u064c\0\64\0\u0680\0\u06b4\0\150"+
    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\64\0\64\0\64\0\u0680"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624"+
    "\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4"+
    "\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\3\3\1\11\2\3\1\12\1\13\1\3\1\14\1\15"+
    "\1\3\1\16\1\17\1\20\1\4\1\21\2\3\1\22"+
    "\1\23\1\3\1\24\1\3\1\25\1\3\1\26\1\27"+
    "\1\3\1\30\1\31\1\32\1\3\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\65\0\2\3\1\0\45\3\15\0\1\4\24\0\1\4"+
    "\33\0\1\46\3\0\1\5\61\0\2\3\1\0\1\3"+
    "\1\47\1\3\1\50\41\3\14\0\2\3\1\0\22\3"+
    "\1\51\22\3\14\0\2\3\1\0\4\3\1\52\1\53"+
    "\23\3\1\54\13\3\14\0\2\3\1\0\4\3\1\55"+
    "\1\56\3\3\1\57\33\3\14\0\2\3\1\0\22\3"+
    "\1\60\22\3\14\0\2\3\1\0\2\3\1\61\4\3"+
    "\1\62\35\3\14\0\2\3\1\0\5\3\1\63\4\3"+
    "\1\64\32\3\14\0\2\3\1\0\12\3\1\65\3\3"+
    "\1\66\26\3\14\0\2\3\1\0\5\3\1\67\37\3"+
    "\14\0\2\3\1\0\22\3\1\70\22\3\14\0\2\3"+
    "\1\0\4\3\1\71\20\3\1\72\17\3\14\0\2\3"+
    "\1\0\1\73\44\3\14\0\2\3\1\0\22\3\1\74"+
    "\22\3\14\0\2\3\1\0\1\75\44\3\14\0\2\3"+
    "\1\0\11\3\1\23\33\3\14\0\2\3\1\0\1\76"+
    "\44\3\14\0\2\3\1\0\12\3\1\77\32\3\14\0"+
    "\2\3\1\0\15\3\1\100\27\3\14\0\2\3\1\0"+
    "\11\3\1\101\33\3\14\0\2\3\1\0\5\3\1\102"+
    "\37\3\14\0\2\3\1\0\12\3\1\103\32\3\64\0"+
    "\1\104\1\0\1\105\63\0\1\106\12\0\1\4\24\0"+
    "\1\4\23\0\1\105\63\0\1\105\71\0\1\107\64\0"+
    "\1\107\3\0\1\110\24\0\1\110\35\0\2\3\1\0"+
    "\2\3\1\50\42\3\14\0\2\3\1\0\32\3\1\50"+
    "\12\3\14\0\2\3\1\0\5\3\1\111\37\3\14\0"+
    "\2\3\1\0\12\3\1\50\32\3\14\0\2\3\1\0"+
    "\1\3\1\112\43\3\14\0\2\3\1\0\6\3\1\113"+
    "\36\3\14\0\2\3\1\0\1\3\1\114\43\3\14\0"+
    "\2\3\1\0\6\3\1\53\36\3\14\0\2\3\1\0"+
    "\2\3\1\115\42\3\14\0\2\3\1\0\6\3\1\116"+
    "\3\3\1\117\32\3\14\0\2\3\1\0\22\3\1\120"+
    "\22\3\14\0\2\3\1\0\5\3\1\121\37\3\14\0"+
    "\2\3\1\0\22\3\1\122\22\3\14\0\2\3\1\0"+
    "\12\3\1\123\32\3\14\0\2\3\1\0\33\3\1\124"+
    "\11\3\14\0\2\3\1\0\4\3\1\125\40\3\14\0"+
    "\2\3\1\0\7\3\1\126\1\127\34\3\14\0\2\3"+
    "\1\0\1\130\7\3\1\131\34\3\14\0\2\3\1\0"+
    "\2\3\1\132\42\3\14\0\2\3\1\0\7\3\1\133"+
    "\35\3\14\0\2\3\1\0\7\3\1\134\35\3\14\0"+
    "\2\3\1\0\4\3\1\131\40\3\14\0\2\3\1\0"+
    "\35\3\1\135\7\3\14\0\2\3\1\0\1\136\44\3"+
    "\14\0\2\3\1\0\40\3\1\137\4\3\14\0\2\3"+
    "\1\0\17\3\1\140\25\3\14\0\2\3\1\0\1\141"+
    "\44\3\14\0\2\3\1\0\12\3\1\125\32\3\13\0"+
    "\52\104\1\0\11\104\1\0\2\3\1\0\6\3\1\47"+
    "\36\3\14\0\2\3\1\0\7\3\1\50\35\3\14\0"+
    "\2\3\1\0\10\3\1\142\34\3\14\0\2\3\1\0"+
    "\10\3\1\47\34\3\14\0\2\3\1\0\31\3\1\143"+
    "\13\3\14\0\2\3\1\0\12\3\1\47\32\3\14\0"+
    "\2\3\1\0\1\144\44\3\14\0\2\3\1\0\1\3"+
    "\1\145\43\3\14\0\2\3\1\0\4\3\1\50\40\3"+
    "\14\0\2\3\1\0\6\3\1\146\36\3\14\0\2\3"+
    "\1\0\6\3\1\147\36\3\14\0\2\3\1\0\33\3"+
    "\1\50\11\3\14\0\2\3\1\0\5\3\1\53\37\3"+
    "\14\0\2\3\1\0\2\3\1\150\42\3\14\0\2\3"+
    "\1\0\5\3\1\151\37\3\14\0\2\3\1\0\3\3"+
    "\1\50\41\3\14\0\2\3\1\0\22\3\1\50\22\3"+
    "\14\0\2\3\1\0\22\3\1\152\22\3\14\0\2\3"+
    "\1\0\2\3\1\153\42\3\14\0\2\3\1\0\2\3"+
    "\1\154\42\3\14\0\2\3\1\0\22\3\1\155\22\3"+
    "\14\0\2\3\1\0\1\3\1\47\43\3\14\0\2\3"+
    "\1\0\22\3\1\156\22\3\14\0\2\3\1\0\10\3"+
    "\1\157\34\3\14\0\2\3\1\0\26\3\1\50\16\3"+
    "\14\0\2\3\1\0\10\3\1\50\34\3\14\0\2\3"+
    "\1\0\12\3\1\160\32\3\14\0\2\3\1\0\1\3"+
    "\1\161\43\3\14\0\2\3\1\0\22\3\1\162\22\3"+
    "\14\0\2\3\1\0\44\3\1\50\14\0\2\3\1\0"+
    "\17\3\1\50\25\3\14\0\2\3\1\0\23\3\1\50"+
    "\21\3\14\0\2\3\1\0\31\3\1\163\13\3\14\0"+
    "\2\3\1\0\1\3\1\164\43\3\14\0\2\3\1\0"+
    "\1\165\44\3\14\0\2\3\1\0\5\3\1\166\37\3"+
    "\14\0\2\3\1\0\13\3\1\167\31\3\14\0\2\3"+
    "\1\0\7\3\1\47\35\3\14\0\2\3\1\0\1\170"+
    "\44\3\14\0\2\3\1\0\1\3\1\50\43\3\14\0"+
    "\2\3\1\0\14\3\1\50\30\3\14\0\2\3\1\0"+
    "\34\3\1\171\10\3\14\0\2\3\1\0\12\3\1\172"+
    "\32\3\14\0\2\3\1\0\26\3\1\142\16\3\14\0"+
    "\2\3\1\0\5\3\1\173\37\3\14\0\2\3\1\0"+
    "\12\3\1\150\32\3\14\0\2\3\1\0\36\3\1\174"+
    "\6\3\14\0\2\3\1\0\7\3\1\175\35\3\14\0"+
    "\2\3\1\0\12\3\1\176\32\3\14\0\2\3\1\0"+
    "\7\3\1\131\35\3\14\0\2\3\1\0\1\3\1\177"+
    "\43\3\14\0\2\3\1\0\6\3\1\160\36\3\14\0"+
    "\2\3\1\0\10\3\1\200\34\3\14\0\2\3\1\0"+
    "\22\3\1\131\22\3\14\0\2\3\1\0\6\3\1\201"+
    "\36\3\14\0\2\3\1\0\13\3\1\202\17\3\1\203"+
    "\11\3\14\0\2\3\1\0\12\3\1\147\32\3\14\0"+
    "\2\3\1\0\11\3\1\204\33\3\14\0\2\3\1\0"+
    "\5\3\1\205\37\3\14\0\2\3\1\0\6\3\1\206"+
    "\36\3\14\0\2\3\1\0\26\3\1\147\16\3\14\0"+
    "\2\3\1\0\36\3\1\131\6\3\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\1\11\5\1\1\11\2\1\1\11"+
    "\1\0\36\1\3\11\77\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public String lexeme;
    public int linea=1;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { lexeme=yytext(); return OpAccesoMiembros;
          }
        case 14: break;
        case 6: 
          { linea++;
          }
        case 15: break;
        case 13: 
          { lexeme=yytext(); return NumFlotante;
          }
        case 16: break;
        case 10: 
          { lexeme=yytext(); return OpAgrupacion;
          }
        case 17: break;
        case 8: 
          { lexeme=yytext(); return OpLogico;
          }
        case 18: break;
        case 9: 
          { lexeme=yytext(); return OpComparacion;
          }
        case 19: break;
        case 5: 
          { lexeme=yytext(); return OpAritmetico;
          }
        case 20: break;
        case 3: 
          { lexeme=yytext(); return NumEntero;
          }
        case 21: break;
        case 7: 
          { lexeme=yytext(); return OpAsignacion;
          }
        case 22: break;
        case 12: 
          { lexeme=yytext(); return Reservada;
          }
        case 23: break;
        case 1: 
          { return ERROR1;
          }
        case 24: break;
        case 4: 
          { /*Ignore*/
          }
        case 25: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
